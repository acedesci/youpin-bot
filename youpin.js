module.exports = (m, conversation) => {
  'use strict';

  return {
    onMessageReceived: function(event) {
      const userid = event.sender.id;
      const timestamp = event.timestamp;
      const message = event.message;
      const messageText = message.text;
      const attachments = message.attachments;

      let context = conversation.getContext(userid);
      context.lastReceived = timestamp;
      if (context.scheduledNudge) {
        clearTimeout(context.scheduledNudge);
        delete context['scheduledNudge'];
      }

      // console.log(JSON.stringify(message));

      if (context.state === 'new') {
        // New session
        context.firstReceived = timestamp;

        // NOTE: THe first message, presumably a greeting, is discared.

        // TO-DO: Save/retrieve user profile from data storage
        m.getProfile(userid, (profile) => {
          context.state = 'started';
          context.profile = profile;

          context.lastSent = (new Date()).getTime();
          m.sendText(userid, `[test] ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Æ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì ${profile.first_name} ` +
            '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏î‡∏±‡πâ‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡∏ü‡∏±‡∏á‡∏Æ‡∏∞ ' +
            '‡πÄ‡∏≠‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÜ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏±‡πâ‡∏ô tag ‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡πÄ‡∏ä‡πà‡∏ô #‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ' +
            '#‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏®‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Æ‡πà‡∏≤'
          );

          context.scheduledNudge = setTimeout(() => {
            let newContext = conversation.getContext(userid);
            if (newContext.lastReceived == timestamp) {
              context.lastSent = (new Date()).getTime();
              m.sendText(userid, '‡πÄ‡∏≠‡πä‡∏≤! ‡∏°‡∏±‡∏ß‡∏£‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏∞‡∏Æ‡∏∞ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå');
              conversation.updateContext(userid, context);
            }
          }, 60000);
        });
      } else {
        // Acknowledge/react to the message
        if (messageText) {
          if (context.desc) {
            context.desc += ' ' + messageText;
          } else {
            context.desc = messageText;
          }

          let hashtags = [];
          let mentions = [];
          // Hacky solution -- regex gets too complicated with unicode characters.
          // https://github.com/twitter/twitter-text/blob/master/js/twitter-text.js
          const tokens = messageText.split(' ');
          tokens.forEach(str => {
            if (str[0] == '#' || str[0] == 'ÔºÉ') {
              hashtags.push(str.substr(1));
            } else if (str[0] == '@' || str[0] == 'Ôº†') {
              mentions.push(str.substr(1));
            }
          });

          if (hashtags.length > 0) {
            if (context.hashtags) {
              context.hashtags.push.apply(context.hashtags, hashtags)
            } else {
              context.hashtags = hashtags;
            }
          }
          if (mentions.length > 0) {
            if (context.mentions) {
              context.mentions.push.apply(context.mentions, mentions)
            } else {
              context.mentions = mentions;
            }
          }

          if (hashtags.length + mentions.legnth < tokens.length / 2 + 1) {
            // Presumably, a long description
            context.lastSent = (new Date()).getTime();
            m.sendText(userid, '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ß');
          } else {
            context.lastSent = (new Date()).getTime();
            m.sendText(userid, '‡∏≠‡πà‡∏≤‡∏Æ‡∏∞');
          }
        } else {
          if (!message.sticker_id) {
            attachments.forEach(item => {
              if (item.type === 'location') {
                const point = item.payload.coordinates;
                context.location = [point.lat, point.long];
              } else if (item.type === 'image') {
                if (!context.photos) {
                  context.photos = [];
                }
                context.photos.push(item.payload.url);
                console.log(item.payload.url);
              } else if (item.type === 'video') {
                if (!context.videos) {
                  context.videos = [];
                }
                context.videos.push(item.payload.url);
              }
            });

            if (attachments[0].type === 'location') {
              context.lastSent = (new Date()).getTime();
              m.sendText(userid, '(Y)');
            } else if (attachments[0].type === 'image') {
              context.lastSent = (new Date()).getTime();
              m.sendText(userid, 'üò∞');
            } else if (attachments[0].type === 'video') {
              context.lastSent = (new Date()).getTime();
              m.sendText(userid, 'üò±');
            }
          }
        }

        context.scheduledNudge = setTimeout(() => {
          let newContext = conversation.getContext(userid);
          if (!newContext.desc) {
            m.sendText(userid, '‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏•‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏±‡πâ‡∏ô‡∏ü‡∏±‡∏á‡∏™‡∏±‡∏Å‡∏ô‡∏¥‡∏î‡∏ô‡∏∞‡∏Æ‡∏∞');
          } else if (!newContext.photos && !newContext.videos) {
            m.sendText(userid, '‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏±‡πâ‡∏ô‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Å‡πá‡∏î‡∏µ‡∏ô‡∏∞‡∏Æ‡∏∞');
          } else if (!newContext.location) {
            m.sendText(userid, '‡∏û‡∏¥‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏´‡πâ‡∏î‡∏±‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Æ‡πà‡∏≤');
          } else {
            m.sendText(userid, '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏ô‡∏∞‡∏Æ‡∏∞ ‡∏î‡∏±‡πâ‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏£‡∏µ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö' +
              `‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢‡∏Æ‡πà‡∏≤ ‡∏Ñ‡∏∏‡∏ì ${newContext.profile.first_name} ` +
              '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢');
            const elements = [{
              title: '‡∏¢‡∏∏‡∏û‡∏¥‡∏ô | YouPin',
              subtitle: newContext.desc,
              item_url: 'http://dev.www.youpin.city/',
              image_url: newContext.photos[0]
            }]
            m.sendGeneric(userid, elements);
          }
          newContext.lastSent = (new Date()).getTime();
          conversation.updateContext(userid, newContext);
        }, 15000);

      }

      conversation.updateContext(userid, context);
    },

     onPostbackReceived: function(event) {
      const userid = event.sender.id;
      const recipientID = event.recipient.id;
      const timeOfPostback = event.timestamp;

      // The 'payload' param is a developer-defined field which is set in a postback
      // button for Structured Messages.
      const payload = event.postback.payload;

      console.log(`Received postback for user ${userid} and page ${recipientID}` +
        `with payload ${payload} at ${timeOfPostback}`);

      // When a postback is called, we'll send a message back to the sender to
      // let them know it was successful
      m.sendText(userid, 'Postback called');
    }

  };
};
